import React, { useState } from "react";
import { Input, InputGroup, IconButton, Carousel, Card, Grid, Row, Col } from "rsuite";
import { Search, ArrowRight } from "@rsuite/icons";
import "rsuite/dist/rsuite.min.css"; // Import RSuite styles
import "./DashboardPage.css"; // Import custom CSS

const DashboardPage = () => {
  const [searchQuery, setSearchQuery] = useState("");
  const cards = [
    { id: 1, title: "Card 1", description: "Description for card 1" },
    { id: 2, title: "Card 2", description: "Description for card 2" },
    { id: 3, title: "Card 3", description: "Description for card 3" },
    { id: 4, title: "Card 4", description: "Description for card 4" },
  ];

  const filteredCards = cards.filter((card) =>
    card.title.toLowerCase().includes(searchQuery.toLowerCase())
  );

  return (
    <div className="dashboard-container">
      {/* Header */}
      <header className="dashboard-header">Dashboard Header</header>

      {/* Blue Section with Carousel */}
      <div className="blue-section">
        <Carousel autoplay className="carousel">
          <div className="carousel-item">Slide 1</div>
          <div className="carousel-item">Slide 2</div>
          <div className="carousel-item">Slide 3</div>
        </Carousel>
      </div>

      {/* Search Bar */}
      <div className="search-bar">
        <InputGroup inside>
          <Input placeholder="Search cards..." onChange={(value) => setSearchQuery(value)} />
          <InputGroup.Button>
            <Search />
          </InputGroup.Button>
        </InputGroup>
      </div>

      {/* Cards Section */}
      <Grid className="cards-section">
        <Row gutter={16}>
          {filteredCards.map((card) => (
            <Col xs={24} sm={12} md={6} key={card.id}>
              <Card className="clickable-card">
                <h4>{card.title}</h4>
                <p>{card.description}</p>
                <IconButton icon={<ArrowRight />} appearance="primary">
                  View More
                </IconButton>
              </Card>
            </Col>
          ))}
        </Row>
      </Grid>

      {/* Footer */}
      <footer className="dashboard-footer">Dashboard Footer</footer>
    </div>
  );
};

export default DashboardPage;




/* General Styling */
.dashboard-container {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
  font-family: Arial, sans-serif;
}

/* Header */
.dashboard-header {
  background: #333;
  color: white;
  text-align: center;
  padding: 15px;
  font-size: 20px;
}

/* Blue Section */
.blue-section {
  background: #007bff;
  height: 30vh;
  display: flex;
  align-items: center;
  justify-content: center;
}

/* Carousel */
.carousel {
  width: 80%;
  max-width: 600px;
}

.carousel-item {
  height: 150px;
  background: white;
  color: black;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 18px;
  border-radius: 8px;
}

/* Search Bar */
.search-bar {
  display: flex;
  justify-content: center;
  padding: 15px;
  background: #f4f4f4;
}

/* Cards Section */
.cards-section {
  padding: 20px;
  display: flex;
  justify-content: center;
}

/* Clickable Cards */
.clickable-card {
  padding: 20px;
  text-align: center;
  background: white;
  border-radius: 10px;
  box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
  cursor: pointer;
  transition: transform 0.2s ease-in-out;
}

.clickable-card:hover {
  transform: scale(1.05);
}

/* Footer */
.dashboard-footer {
  background: #333;
  color: white;
  text-align: center;
  padding: 15px;
  margin-top: auto;
}

/* Responsive Design */
@media (max-width: 768px) {
  .blue-section {
    height: 25vh;
  }

  .clickable-card {
    margin-bottom: 15px;
  }
}






import React, { useState } from "react";
import { Input, InputGroup, IconButton, Carousel, Panel, Grid, Row, Col } from "rsuite";
import { Search, ArrowRight } from "@rsuite/icons";
import "rsuite/dist/rsuite.min.css"; 
import "./DashboardPage.css"; 

const DashboardPage = () => {
  const [searchQuery, setSearchQuery] = useState("");
  const [slideIndex, setSlideIndex] = useState(0);

  const slides = [
    { id: 1, text: "Slide 1", color: "#ff6b6b" },
    { id: 2, text: "Slide 2", color: "#51cf66" },
    { id: 3, text: "Slide 3", color: "#4dabf7" },
  ];

  const handleSlideChange = (index) => {
    setSlideIndex(index);
  };

  return (
    <div className="dashboard-container">
      <header className="dashboard-header">Dashboard Header</header>

      {/* Blue Section with Dynamic Background */}
      <div className="blue-section" style={{ backgroundColor: slides[slideIndex].color }}>
        <Carousel
          autoplay
          autoplayInterval={2000} // Changes slide every 2 seconds
          className="carousel"
          onSelect={handleSlideChange}
        >
          {slides.map((slide) => (
            <div key={slide.id} className="carousel-item">
              {slide.text}
            </div>
          ))}
        </Carousel>
      </div>

      {/* Search Bar */}
      <div className="search-bar">
        <InputGroup inside>
          <Input placeholder="Search cards..." onChange={(value) => setSearchQuery(value)} />
          <InputGroup.Button>
            <Search />
          </InputGroup.Button>
        </InputGroup>
      </div>

      {/* Cards Section */}
      <Grid className="cards-section">
        <Row gutter={16}>
          {[1, 2, 3, 4].map((id) => (
            <Col xs={24} sm={12} md={6} key={id}>
              <Panel shaded bordered bodyFill className="clickable-card">
                <h4>Card {id}</h4>
                <p>Card description</p>
                <IconButton icon={<ArrowRight />} appearance="primary">
                  View More
                </IconButton>
              </Panel>
            </Col>
          ))}
        </Row>
      </Grid>

      {/* Footer */}
      <footer className="dashboard-footer">Dashboard Footer</footer>
    </div>
  );
};

export default DashboardPage;



import { LitElement, html, css } from 'lit';

export class DashboardPage extends LitElement {
  static styles = css`
    :host {
      display: block;
      font-family: Arial, sans-serif;
    }

    .dashboard-container {
      display: flex;
      flex-direction: column;
      align-items: center;
      text-align: center;
    }

    .dashboard-header, .dashboard-footer {
      width: 100%;
      background: #333;
      color: white;
      padding: 15px;
      font-size: 18px;
    }

    .blue-section {
      width: 100%;
      height: 30vh;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: background-color 0.5s ease-in-out;
    }

    .carousel-container {
      width: 80%;
      max-width: 600px;
    }

    .carousel-item {
      height: 150px;
      background: white;
      color: black;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 18px;
      border-radius: 8px;
      transition: background-color 0.5s ease-in-out;
      box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
    }

    .search-bar {
      margin: 20px;
      display: flex;
      justify-content: center;
      gap: 10px;
    }

    input {
      padding: 10px;
      font-size: 16px;
      border: 1px solid #ddd;
      border-radius: 5px;
      width: 200px;
    }

    button {
      padding: 10px 15px;
      font-size: 16px;
      border: none;
      background: #007bff;
      color: white;
      cursor: pointer;
      border-radius: 5px;
      transition: background 0.3s;
    }

    button:hover {
      background: #0056b3;
    }

    .cards-container {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 15px;
      padding: 20px;
      max-width: 800px;
    }

    .card {
      background: #fff;
      border-radius: 10px;
      padding: 15px;
      box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
      transition: transform 0.2s;
      cursor: pointer;
      text-align: left;
    }

    .card:hover {
      transform: scale(1.05);
    }

    .footer {
      margin-top: 20px;
      padding: 10px;
      background: #333;
      color: white;
      text-align: center;
      width: 100%;
    }
  `;

  static properties = {
    searchQuery: { type: String },
    slideIndex: { type: Number },
    slides: { type: Array },
    cards: { type: Array }
  };

  constructor() {
    super();
    this.searchQuery = '';
    this.slideIndex = 0;
    this.slides = [
      { text: 'Slide 1', color: '#ff6b6b' },
      { text: 'Slide 2', color: '#51cf66' },
      { text: 'Slide 3', color: '#4dabf7' }
    ];
    this.cards = [
      { title: 'Card 1', description: 'Some details about card 1' },
      { title: 'Card 2', description: 'Some details about card 2' },
      { title: 'Card 3', description: 'Some details about card 3' },
      { title: 'Card 4', description: 'Some details about card 4' }
    ];
  }

  updateSlideIndex() {
    this.slideIndex = (this.slideIndex + 1) % this.slides.length;
    this.requestUpdate();
  }

  updateSearchQuery(event) {
    this.searchQuery = event.target.value.toLowerCase();
  }

  render() {
    return html`
      <div class="dashboard-container">
        <header class="dashboard-header">Dashboard Header</header>

        <div class="blue-section" style="background-color: ${this.slides[this.slideIndex].color}">
          <div class="carousel-container">
            <div class="carousel-item">${this.slides[this.slideIndex].text}</div>
          </div>
        </div>

        <button @click="${this.updateSlideIndex}">Next Slide</button>

        <div class="search-bar">
          <input type="text" placeholder="Search cards..." @input="${this.updateSearchQuery}" />
          <button>Search</button>
        </div>

        <div class="cards-container">
          ${this.cards
            .filter(card => card.title.toLowerCase().includes(this.searchQuery))
            .map(
              card => html`
                <div class="card">
                  <h4>${card.title}</h4>
                  <p>${card.description}</p>
                  <button>View More</button>
                </div>
              `
            )}
        </div>

        <footer class="dashboard-footer">Dashboard Footer</footer>
      </div>
    `;
  }
}

customElements.define('dashboard-page', DashboardPage);
