import org.apache.http.conn.ssl.NoopHostnameVerifier;
import org.apache.http.conn.ssl.TrustAllStrategy;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.ssl.SSLContextBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.web.client.RestTemplate;

@Configuration
public class RestTemplateConfig {

    @Bean
    public RestTemplate insecureRestTemplate() throws Exception {
        SSLContextBuilder sslContextBuilder = SSLContextBuilder.create()
            .loadTrustMaterial(null, TrustAllStrategy.INSTANCE);

        CloseableHttpClient httpClient = HttpClients.custom()
            .setSSLContext(sslContextBuilder.build())
            .setSSLHostnameVerifier(NoopHostnameVerifier.INSTANCE)
            .build();

        return new RestTemplate(new HttpComponentsClientHttpRequestFactory(httpClient));
    }
}



import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.http.client.ClientHttpResponse;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.client.RestTemplate;

import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URI;
import java.nio.charset.StandardCharsets;

@Controller
@RequestMapping("/proxy/**")
public class ProxyController {

    private final RestTemplate restTemplate;

    public ProxyController(RestTemplate insecureRestTemplate) {
        this.restTemplate = insecureRestTemplate;
    }

    @RequestMapping("/**")
    public void proxy(HttpServletRequest request, HttpServletResponse response) throws Exception {
        String targetHost = request.getHeader("Host");
        String path = request.getRequestURI().replaceFirst("/proxy", "");
        String query = request.getQueryString();
        String targetUrl = "https://" + targetHost + path + (query != null ? "?" + query : "");

        byte[] responseBytes = restTemplate.execute(
            new URI(targetUrl),
            org.springframework.http.HttpMethod.valueOf(request.getMethod()),
            clientHttpRequest -> {
                request.getHeaderNames().asIterator()
                        .forEachRemaining(name ->
                                clientHttpRequest.getHeaders().add(name, request.getHeader(name))
                        );
            },
            (ClientHttpResponse clientResponse) -> {
                // Copy status
                response.setStatus(clientResponse.getRawStatusCode());
                clientResponse.getHeaders()
                        .forEach((k, v) -> response.setHeader(k, String.join(",", v)));

                // Read body into byte array
                try (InputStream is = clientResponse.getBody();
                     ByteArrayOutputStream baos = new ByteArrayOutputStream()) {
                    is.transferTo(baos);
                    byte[] bodyBytes = baos.toByteArray();

                    // Print response as string (you can also log)
                    String bodyString = new String(bodyBytes, StandardCharsets.UTF_8);
                    System.out.println("Response from target:\n" + bodyString);

                    return bodyBytes;
                }
            }
        );

        // Write the bytes back to the client
        try (OutputStream os = response.getOutputStream()) {
            os.write(responseBytes);
        }
    }
}



